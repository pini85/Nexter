.header {
  background-color: $color-grey-dark-1;
  //The best way to make an overlay is with the same color back to back.
  background-image: linear-gradient(rgba($color-secondary, .93), rgba($color-secondary, .93)), url(../img/hero.jpeg);
  background-size: cover;
  background-position: center;
  padding: 8rem;
  padding-top: 4rem;
  grid-column: full-start / col-end 6;

  display: grid;
  /*
  We do not need to play with margins. We can play wirh css grid to position them as we please with gaps:
  1fr:
  Because we only defined one row, the rest of the other elements will become a implicit grid which they will only take their
  available space. Therefore the first row as we defined as a 1fr will be a huge row.
  6rem:
  We also want the 3rd element to have a bigger gap between the 3rd and 4th element.(header/btn) so we set it to 6rem
  min-content:
  When are going responsive the problem was the header had fixed pixels therefore when we put the screen smaller it was breaking the rows
  height. So if we put min-content that means it will always display the header with its row perfectly.
  1fr:
  We want a huge space between the button and the seen on so we set it to 1fr*/
  grid-template-rows: 1fr min-content minmax(6rem, min-content) 1fr;
  grid-template-columns: minmax(min-content, max-content);
  /* Max-content:
  We want everything to be in the center of the content so we use max-content. The biggest element is the header so everything is
  centered with that element.
  Min-content: We had a problem for responsivness for img. We fixed the problem so it wont have a fix width and height below but since
  we used only max-content it is always the max-height and max-width so we set another argument which is min-content. So now it works*/
  grid-row-gap: 1.5rem;
  justify-content: center;
  //We want to center all the content in the div.

  @media only screen and (max-width: $md) {
    grid-column: 1 / -1;
  }

  @media only screen and (max-width: $sm) {
    padding: 5rem;
  }




  &__logo {
    height: 3rem;
    justify-self: center;

  }

  &__btn {
    align-self:start;
    justify-self:start;
  }

  &__seenon-text {
    display: grid;
    font-size: 1.6rem;
    color: $color-grey-light-2;

    grid-template-columns: 1fr max-content 1fr;
    grid-column-gap: 1.5rem;
    align-items: center;

    &::after,
    &::before {
      content: "";
      display: block;
      height: 1px;
      background-color: currentColor;
    }
  }

  &__seenon-logo {
    /*We can have used flex box to align these items but then we had to play with margin right. Grid is simplier for they have the gap
    function.*/
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    justify-items: center;
    align-items: center;
    grid-column-gap: 3rem;


    img {
      height: 2.5rem;
      filter: brightness(70%);// this makes the images darker. Having a grey color.

    /* When we finished the project and wanted to be responsive the header was overlapping the conatiner because the images were
    overlapping because we set a fixed width to them so we change this as follows:*/
    max-height: 2.5rem;
    max-width: 100%;
    /*So we are saying the maxium it will be 2.5rem but it can be smaller. To make this work we need to set a height as well.*/


    }

  }
}


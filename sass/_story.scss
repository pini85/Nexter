.story {

  &__pictures {
    background-image: linear-gradient(rgba($color-primary, .5), rgba($color-primary, .5)), url(../img/back.jpg);

    background-color: $color-primary;
    grid-column: full-start / col-end 4;
    display: grid;
    grid-template-rows: repeat(6, 1fr);
    grid-template-columns: repeat(6, 1fr);
    background-size: cover;
    align-items: center;
    /* We want to center the image in the grid container but it wasn't centered exactly because it was smaller than the grid.
     so align-items made it centered
     The image was smaller because images are dimensions and trhey have aspect ratios which they try to  retain at all times.*/

     @media only screen and (max-width: $md) {
      grid-column: 1 / -1;
      padding: 6rem;
    }
  }

    &__img-1 {
      width: 100%;// Remember with images you always need to specify a % width or else it will not be responsive.
      grid-row: 2 / 6;
      grid-column: 2 / 6;
      box-shadow: 0 2rem 5rem rgba(#000, .1);

      @media only screen and (max-width: $md) {
        grid-column: 1 / 5;
        grid-row: 1 / -1;
      }



/////THE BEST WOULD OF BEEN TO USE ABSOLUTE POSITIONING BUT THIS IS FOR TRAINING PURPOSES.///////
  }

   &__img-2 {
    width:115%;// we want this to overlap the grid to the other side
    grid-row:4 / 6;
    grid-column: 4 / 7;
    z-index: 2;// we made the image overlap and go to the other side but it was under the content grid. Z-index arised it.
    box-shadow: 0 2rem 5rem rgba(#000, .2);// making this .2 because it is overlapping to the white background. Need more shadow there.

    @media only screen and (max-width: $md) {
        grid-row: 1 / -1;
        width: 100%;
      }
  }

  &__content {
    /* You need to know when to use css grid and when to use flex-box. This is a 1 dimensional layout therefore flex-box is the
    best solution.*/
    background-color: $color-grey-light-1;
    grid-column: col-start 5 / full-end;

    padding: 6rem 8vw;
    /* Viewport width unit is getting more and more used for bilding truly responsive layouts. We had hard coding 10rem for the width
    and when we decrease the size the padding got larger which we dont want. Viewport width fixed that.*/
    display:flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-start;
    //Css grid way:
    /*display: grid;
    align-content: center;
    justify-items: start; //We are making the button to its original size. It was by default stretch.*/

    @media only screen and (max-width: $md) {
     grid-column: 1 / -1;
     grid-row: 5 / 6;
   }

  }

  &__text {
    font-size: 1.5rem;
    font-style: italic;

  }
}
